name: Smart Travel Planner CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Run Black (code formatting)
      run: black --check --diff src/ tests/

    - name: Run isort (import sorting)
      run: isort --check-only --diff src/ tests/

    - name: Run flake8 (style guide)
      run: flake8 src/ tests/ --max-line-length=88 --ignore=E203,W503

    - name: Run mypy (type checking)
      run: mypy src/ --ignore-missing-imports

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: infrastructure/terraform

    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: infrastructure/terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: infrastructure/terraform

  build-lambda:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -t lambda_package/
        
    - name: Copy source code
      run: |
        cp -r src/* lambda_package/
        cp lambda_function.py lambda_package/

    - name: Create deployment package
      run: |
        cd lambda_package
        zip -r ../lambda_deployment_package_python311.zip .
        cd ..

    - name: Upload Lambda package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: lambda-deployment-package
        path: lambda_deployment_package_python311.zip
        retention-days: 30

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [terraform-validate, build-lambda]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Lambda package
      uses: actions/download-artifact@v3
      with:
        name: lambda-deployment-package

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload Lambda package to S3
      run: |
        aws s3 cp lambda_deployment_package_python311.zip s3://${{ secrets.LAMBDA_DEPLOYMENT_BUCKET }}/dev/

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/terraform
      env:
        TF_VAR_environment: dev

    - name: Terraform Plan
      run: terraform plan -var="environment=dev" -out=tfplan
      working-directory: infrastructure/terraform

    - name: Terraform Apply
      run: terraform apply tfplan
      working-directory: infrastructure/terraform

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [terraform-validate, build-lambda]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Lambda package
      uses: actions/download-artifact@v3
      with:
        name: lambda-deployment-package

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload Lambda package to S3
      run: |
        aws s3 cp lambda_deployment_package_python311.zip s3://${{ secrets.LAMBDA_DEPLOYMENT_BUCKET }}/prod/

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/terraform
      env:
        TF_VAR_environment: prod

    - name: Terraform Plan
      run: terraform plan -var="environment=prod" -out=tfplan
      working-directory: infrastructure/terraform

    - name: Terraform Apply
      run: terraform apply tfplan
      working-directory: infrastructure/terraform

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
